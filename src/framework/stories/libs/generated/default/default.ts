/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * React CS Example
 * OpenAPI for example of React Cost Savings Component
 * OpenAPI spec version: 1.0.0
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  BadRequestResponse,
  ListTodoParams,
  ListTodoResponse
} from '.././model'
import { customInstance } from '../../backend/customInstance';
import type { ErrorType } from '../../backend/customInstance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * List todo
 * @summary List todo
 */
export const listTodo = (
    params?: ListTodoParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<ListTodoResponse>(
      {url: `/todos`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getListTodoQueryKey = (params?: ListTodoParams,) => {
    return [`/todos`, ...(params ? [params]: [])] as const;
    }

    
export const getListTodoQueryOptions = <TData = Awaited<ReturnType<typeof listTodo>>, TError = ErrorType<BadRequestResponse>>(params?: ListTodoParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listTodo>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getListTodoQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof listTodo>>> = ({ signal }) => listTodo(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof listTodo>>, TError, TData> & { queryKey: QueryKey }
}

export type ListTodoQueryResult = NonNullable<Awaited<ReturnType<typeof listTodo>>>
export type ListTodoQueryError = ErrorType<BadRequestResponse>


export function useListTodo<TData = Awaited<ReturnType<typeof listTodo>>, TError = ErrorType<BadRequestResponse>>(
 params: undefined |  ListTodoParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof listTodo>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof listTodo>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useListTodo<TData = Awaited<ReturnType<typeof listTodo>>, TError = ErrorType<BadRequestResponse>>(
 params?: ListTodoParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listTodo>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof listTodo>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useListTodo<TData = Awaited<ReturnType<typeof listTodo>>, TError = ErrorType<BadRequestResponse>>(
 params?: ListTodoParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listTodo>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary List todo
 */

export function useListTodo<TData = Awaited<ReturnType<typeof listTodo>>, TError = ErrorType<BadRequestResponse>>(
 params?: ListTodoParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof listTodo>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getListTodoQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



