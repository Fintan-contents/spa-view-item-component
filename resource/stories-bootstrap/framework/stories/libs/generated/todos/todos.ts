/**
 * Generated by orval v7.1.1 üç∫
 * Do not edit manually.
 * React CS Example
 * OpenAPI for example of React Cost Savings Component
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import type {
  BadRequestResponse,
  Todo,
  TodoRegistration
} from '.././model'
import { customInstance } from '../../backend/customInstance';
import type { ErrorType, BodyType } from '../../backend/customInstance';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * Create todo
 * @summary Create todo
 */
export const postTodo = (
    todoRegistration: BodyType<TodoRegistration>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<Todo>(
      {url: `/todos`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: todoRegistration
    },
      options);
    }
  


export const getPostTodoMutationOptions = <TError = ErrorType<BadRequestResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTodo>>, TError,{data: BodyType<TodoRegistration>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postTodo>>, TError,{data: BodyType<TodoRegistration>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTodo>>, {data: BodyType<TodoRegistration>}> = (props) => {
          const {data} = props ?? {};

          return  postTodo(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTodoMutationResult = NonNullable<Awaited<ReturnType<typeof postTodo>>>
    export type PostTodoMutationBody = BodyType<TodoRegistration>
    export type PostTodoMutationError = ErrorType<BadRequestResponse>

    /**
 * @summary Create todo
 */
export const usePostTodo = <TError = ErrorType<BadRequestResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTodo>>, TError,{data: BodyType<TodoRegistration>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTodo>>,
        TError,
        {data: BodyType<TodoRegistration>},
        TContext
      > => {

      const mutationOptions = getPostTodoMutationOptions(options);

      return useMutation(mutationOptions);
    }
    